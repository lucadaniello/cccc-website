---
title: "importData()"
format:
  html:
    toc: true
    toc-depth: 3
page-layout: full
---
**Import and Validate Corpus Data**

The `importData()` function is the entry point for the cccc analytical pipeline. It imports, validates, and structures your corpus data and metadata into a standardized format ready for temporal analysis.

---

## üîπ Function Definition

```r
importData(
  tdm_file,
  corpus_file,
  sep_tdm = ";",
  sep_corpus_info = ";",
  zone = "stat",
  verbose = TRUE
)
```

---

## üéØ Purpose

This function performs several critical operations:

1. **Reads data files** ‚Äî Imports term-document matrix (TDM) and corpus metadata from CSV or Excel files
2. **Validates structure** ‚Äî Ensures data format consistency and completeness
3. **Cleans keywords** ‚Äî Standardizes term formatting and removes duplicates
4. **Computes frequencies** ‚Äî Calculates total frequency per term across all time periods
5. **Assigns zones** ‚Äî Classifies terms into frequency zones for stratified analysis
6. **Structures output** ‚Äî Returns a standardized list object for downstream analysis

This function is essential for ensuring data quality and consistency before any temporal modeling or clustering operations.

---

## ‚öôÔ∏è Arguments

| Argument | Type | Default | Description |
|----------|------|---------|-------------|
| **tdm_file** | Character | *required* | Path to the term-document matrix file (CSV or Excel). **First column**: keywords/terms. **Remaining columns**: frequencies per year. |
| **corpus_file** | Character | *required* | Path to the corpus information file (CSV or Excel). Must include columns for years, tokens, and number of documents per year. |
| **sep_tdm** | Character | `";"` | Column separator for TDM CSV file. Ignored if file is Excel format. |
| **sep_corpus_info** | Character | `";"` | Column separator for corpus info CSV file. Ignored if file is Excel format. |
| **zone** | Character | `"stat"` | Frequency zone classification strategy:<br>‚Ä¢ `"stat"`: Statistical quartiles<br>‚Ä¢ `"ling"`: Linguistic frequency-based zones |
| **verbose** | Logical | `TRUE` | If `TRUE`, prints progress messages during import and processing. |

---

## üìä Input File Requirements

### Term-Document Matrix (TDM) File

The TDM file must have the following structure:

| keyword | 2000 | 2001 | 2002 | ... |
|---------|------|------|------|-----|
| algorithm | 145 | 178 | 203 | ... |
| data | 892 | 945 | 1021 | ... |
| network | 234 | 267 | 289 | ... |

**Requirements:**
- First column contains keywords/terms
- Subsequent columns represent years (column names should be year values)
- Cell values are raw frequencies for each term in each year
- Supported formats: CSV (with customizable separator) or Excel (.xlsx, .xls)

### Corpus Information File

The corpus metadata file must include:

| year | dimCorpus | nDoc |
|------|-----------|------|
| 2000 | 1500000 | 450 |
| 2001 | 1650000 | 478 |
| 2002 | 1820000 | 502 |

**Requirements:**
- `year`: Year identifier (must match TDM column names)
- `dimCorpus`: Total number of tokens in the corpus for that year
- `nDoc`: Number of documents in the corpus for that year
- Additional metadata columns are preserved but not required

---

## üì¶ Output

Returns a **list** object with the following components:

| Element | Type | Description |
|---------|------|-------------|
| **tdm** | tibble | Processed term-document matrix including:<br>‚Ä¢ `keyword`: Cleaned term<br>‚Ä¢ `tot_freq`: Total frequency across all years<br>‚Ä¢ `int_freq`: Frequency interval label<br>‚Ä¢ `zone`: Assigned frequency zone<br>‚Ä¢ Year columns: Frequencies per year |
| **corpus_info** | tibble | Corpus metadata with `years`, `dimCorpus`, `nDoc`, and any additional metadata columns |
| **norm** | logical | Normalization status (initially `FALSE`, updated after `normalization()`) |
| **year_cols** | numeric | Vector of column indices corresponding to yearly frequencies in the TDM |
| **zone** | character | Vector of unique frequency zone labels |
| **colors** | character | Default color palette for zones (used in visualization functions) |

---

## üîç Frequency Zones

### Statistical Zones (`zone = "stat"`)

Terms are classified into quartile-based zones:
- **Zone 1**: Q1 (0-25th percentile) ‚Äî Low frequency terms
- **Zone 2**: Q2 (25-50th percentile) ‚Äî Lower-medium frequency terms
- **Zone 3**: Q3 (50-75th percentile) ‚Äî Upper-medium frequency terms
- **Zone 4**: Q4 (75-100th percentile) ‚Äî High frequency terms

### Linguistic Zones (`zone = "ling"`)

Terms are classified based on linguistic frequency theory:
- Different thresholds based on corpus-linguistic principles
- Zones reflect natural language frequency distributions
- More aligned with Zipf's law and lexical stratification

---

## üí° Usage Examples

### Basic Usage

```r
library(cccc)

# Import data with default settings
corpus_data <- importData(
  tdm_file = "data/term_document_matrix.csv",
  corpus_file = "data/corpus_info.csv"
)

# Check structure
str(corpus_data)
names(corpus_data$tdm)
```

### Using Excel Files

```r
# Import from Excel files (separator arguments are ignored)
corpus_data <- importData(
  tdm_file = "data/tdm.xlsx",
  corpus_file = "data/corpus_metadata.xlsx",
  zone = "ling"  # Use linguistic zones
)
```

### Custom Separator for CSV

```r
# Import CSV files with comma separator
corpus_data <- importData(
  tdm_file = "data/tdm.csv",
  corpus_file = "data/corpus.csv",
  sep_tdm = ",",
  sep_corpus_info = ",",
  verbose = TRUE
)
```

---

## üîó Typical Workflow

After importing data with `importData()`, the typical next steps are:

1. **Explore the data** ‚Üí Use `rowMassPlot()` and `colMassPlot()` to visualize frequency distributions
2. **Normalize frequencies** ‚Üí Apply `normalization()` to account for corpus size variations
3. **Visualize trajectories** ‚Üí Use `curvePlot()` or `facetPlot()` to examine temporal patterns
4. **Model and smooth** ‚Üí Apply smoothing functions to identify trends

<!-- ```r -->
<!-- # Complete example -->
<!-- corpus <- importData("tdm.csv", "corpus.csv") -->
<!-- rowMassPlot(corpus)  # Explore keyword frequencies -->
<!-- corpus_norm <- normalization(corpus, method = "nchi")  # Normalize -->
<!-- curvePlot(corpus_norm, keywords = c("algorithm", "data"))  # Visualize -->
<!-- ``` -->

---

## üìö See Also

- [`normalization()`](normalization.html) ‚Äî Normalize the imported TDM
- [`rowMassPlot()`](rowMassPlot.html) ‚Äî Visualize keyword frequency distribution
- [`colMassPlot()`](colMassPlot.html) ‚Äî Visualize temporal corpus dimensions

---
